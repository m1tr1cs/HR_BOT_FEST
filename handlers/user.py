from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from states import Form
from keyboards import phone_keyboard, interest_keyboard
from keyboards import back_keyboard
from utils.sheets import get_vacancies
import logging

user_router = Router()

@user_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    logging.info(f"User {message.from_user.id} started bot")
    welcome_text = '''
–•–æ–ª–¥–∏–Ω–≥ –µ–º–æ—Ü—ñ–π !FEST ‚Äî —Ü–µ –º–µ—Ä–µ–∂–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ —Ç–∞ –ø—Ä–æ—î–∫—Ç—ñ–≤ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º–∏ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—è–º–∏. –ú–∏ —Ä–æ–∑–ø–æ—á–∞–ª–∏ —Ü–µ–π —à–ª—è—Ö —É 2007 —Ä–æ—Ü—ñ, —ñ –∑ —Ç–æ–≥–æ —á–∞—Å—É –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑—Ä–æ—Å–ª–∞ –¥–æ –ø–æ–Ω–∞–¥ 2000 –ª—é–¥–µ–π, —è–∫—ñ —â–æ–¥–Ω—è –Ω–∞–ø–æ–≤–Ω—é—é—Ç—å —Ü–µ–π —Å–≤—ñ—Ç –µ–º–æ—Ü—ñ—è–º–∏, —Å–º–∞–∫–∞–º–∏ —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏.
'''
    await state.clear()
    await message.answer(welcome_text, reply_markup=ReplyKeyboardRemove())
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?")
    await state.set_state(Form.waiting_for_name)

@user_router.message(Form.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name or len(name) < 1:
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—î —Å–ø—Ä–∞–≤–∂–Ω—î —ñ–º‚Äô—è.")
        return
    await state.update_data(name=name)
    await message.answer("üìû –¢–µ–ø–µ—Ä –ø–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –≤–≤–µ–¥–∏ –π–æ–≥–æ –≤—Ä—É—á–Ω—É:", reply_markup=phone_keyboard())
    await state.set_state(Form.waiting_for_phone)

@user_router.message(Form.waiting_for_phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("üìÖ –í–≤–µ–¥–∏ —Å–≤—ñ–π –≤—ñ–∫ (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.waiting_for_age)

@user_router.message(Form.waiting_for_phone)
async def process_phone_text(message: Message, state: FSMContext):
    phone = message.text.strip()
    import re
    if not re.match(r"^\+?\d{10,15}$", phone):
        await message.answer("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380XXXXXXXXX):")
        return
    await state.update_data(phone=phone)
    await message.answer("üìÖ –í–≤–µ–¥–∏ —Å–≤—ñ–π –≤—ñ–∫ (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.waiting_for_age)

@user_router.message(Form.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –≤—ñ–∫ —è–∫ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 18, 22, 47):")
        return
    age = int(message.text)
    if not 16 <= age <= 55:
        await message.answer("üîû –ù–∞ –∂–∞–ª—å, –º–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –≤—ñ–∫–æ–º –≤—ñ–¥ 16 –¥–æ 55 —Ä–æ–∫—ñ–≤.")
        return
    await state.update_data(age=str(age))
    await message.answer("üîé –ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:", reply_markup=interest_keyboard())
    await state.set_state(Form.choosing_interest)

@user_router.message(Form.choosing_interest, F.text.in_(["–†–æ–±–æ—Ç–∞", "–ü—Ä–æ –Ω–∞—Å"]))
async def process_interest(message: Message, state: FSMContext):
    text = message.text
    if text == "–ü—Ä–æ –Ω–∞—Å":
        about_text = (
            "–¢–µ–ø–µ—Ä !FEST ‚Äì —É–∂–µ –±—ñ–ª—å—à –Ω—ñ–∂ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è..."
        )
        await message.answer(about_text, reply_markup=interest_keyboard())
        return

    if text == "–†–æ–±–æ—Ç–∞":
        vacancies = get_vacancies()
        if not vacancies:
            await message.answer("üòî –ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return

        await state.update_data(vacancies=vacancies)
        unique_positions = sorted(list(set(v['position'] for v in vacancies if 'position' in v)))

        from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
        position_buttons = [KeyboardButton(text=pos) for pos in unique_positions]
        kb = ReplyKeyboardMarkup(
            keyboard=[[btn] for btn in position_buttons] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        await message.answer("–ß—É–¥–æ–≤–æ! –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —è–∫–∞ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:", reply_markup=kb)
        await state.set_state(Form.choosing_position)
