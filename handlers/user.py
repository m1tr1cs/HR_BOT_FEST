from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from states import Form
import logging
import re
from keyboards import interest_inline_keyboard, phone_keyboard, cancel_keyboard, back_to_interest_keyboard, \
    admin_panel_keyboard
from utils.db import get_candidate_by_chat_id, is_admin

user_router = Router()


@user_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    logging.info(f"User {message.from_user.id} started bot")

    await state.clear()

    chat_id = message.from_user.id
    user_data = get_candidate_by_chat_id(chat_id)

    if user_data:
        await state.update_data(**user_data)
        await message.answer(
            f"""üëã –ü—Ä–∏–≤—ñ—Ç –∑–Ω–æ–≤—É, {user_data['name']}!

–¢–≤–æ—ó –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ:
üë§ –Ü–º'—è: {user_data['name']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}
üéÇ –í—ñ–∫: {user_data['age']}
""", reply_markup=ReplyKeyboardRemove())
        is_admin_user = is_admin(chat_id)
        await message.answer(
            "üîé –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:",
            reply_markup=interest_inline_keyboard(
                show_edit_button=True,
                show_feedback_button=True,
                show_admin_button=is_admin_user
            )
        )
        await state.set_state(Form.choosing_interest)
        return

    # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.waiting_for_name)


@user_router.message(Form.waiting_for_name)
async def process_name_or_cancel(message: Message, state: FSMContext):
    text = message.text.strip()

    if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        data = await state.get_data()
        show_edit = all(data.get(k) for k in ["name", "phone", "age"])

        await message.answer("üîé –ß—É–¥–æ–≤–æ! –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:",
                             reply_markup=ReplyKeyboardRemove())
        await message.answer("‚¨áÔ∏è –û–±–µ—Ä–∏ –¥—ñ—é:",
                             reply_markup=interest_inline_keyboard(show_edit_button=show_edit))

        await state.set_state(Form.choosing_interest)
        return

    # —è–∫—â–æ –Ω–µ "–°–∫–∞—Å—É–≤–∞—Ç–∏" ‚Äî –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ —ñ–º‚Äô—è
    if not re.match(r"^[A-Za-z–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë º'\- ]+$", text):
        await message.answer(
            "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —ñ–º‚Äô—è –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∞–º–∏ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é), –±–µ–∑ —Ü–∏—Ñ—Ä —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤.")
        return

    await state.update_data(name=text)
    await message.answer(
        "üìû –¢–µ–ø–µ—Ä –ø–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –≤–≤–µ–¥–∏ –π–æ–≥–æ –≤—Ä—É—á–Ω—É:",
        reply_markup=phone_keyboard()
    )
    await state.set_state(Form.waiting_for_phone)


@user_router.message(Form.waiting_for_phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏ —Å–≤—ñ–π –≤—ñ–∫ (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.waiting_for_age)


@user_router.message(Form.waiting_for_phone)
async def process_phone_text(message: Message, state: FSMContext):
    phone = message.text.strip()
    import re
    if not re.match(r"^\+?\d{10,15}$", phone):
        await message.answer("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380XXXXXXXXX):")
        return
    await state.update_data(phone=phone)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏ —Å–≤—ñ–π –≤—ñ–∫ (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.waiting_for_age)


@user_router.message(Form.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer("üìÖ –í–≤–µ–¥–∏ —Å–≤—ñ–π –≤—ñ–∫ (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25):")
        return
    age = int(message.text)
    if not 16 <= age <= 55:
        await message.answer("–ù–∞–∂–∞–ª—å, –º–∏ —Ä–æ–∑–≥–ª—è–¥–∞—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –≤—ñ–∫–æ–º –≤—ñ–¥ 16 –¥–æ 55 —Ä–æ–∫—ñ–≤.")
        return
    await state.update_data(age=str(age))
    # await message.answer("üîé –ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:", reply_markup=interest_keyboard()) #–∑–≤–∏—á–∞–π–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    # new keyboard inline (–†–æ–±–æ—Ç–∞, –ü—Ä–æ –Ω–∞—Å)
    await message.answer(
        "üîé –ß—É–¥–æ–≤–æ! –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:",
        reply_markup=interest_inline_keyboard()
    )
    await state.set_state(Form.choosing_interest)


@user_router.callback_query(F.data == "edit_user_data")
async def edit_user_data(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.answer(f"""–¢–≤–æ—ó –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ:
üë§ –Ü–º'—è: {data.get('name')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}
üéÇ –í—ñ–∫: {data.get('age')}

‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–µ —ñ–º‚Äô—è (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚Äú‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏‚Äù):""",
                                  reply_markup=cancel_keyboard())
    await state.set_state(Form.waiting_for_name)
    await callback.answer()


@user_router.callback_query(F.data.in_(["interest_job", "interest_about"]), Form.choosing_interest)
async def process_interest_inline(callback: CallbackQuery, state: FSMContext):
    text = callback.data

    data = await state.get_data()
    show_edit = all(data.get(k) for k in ["name", "phone", "age"])

    if text == "interest_about":
        from utils.db import get_setting
        about_text = get_setting("about_text") or "ü§∑‚Äç‚ôÄÔ∏è –†–æ–∑–¥—ñ–ª ¬´–ü—Ä–æ –Ω–∞—Å¬ª —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π."
        is_admin_user = is_admin(callback.from_user.id)

        await callback.message.answer(
            about_text,
            reply_markup=interest_inline_keyboard(
                show_edit_button=show_edit,
                show_feedback_button=True,
                show_admin_button=is_admin_user
            )
        )
        await callback.answer()
        return

    if text == "interest_job":
        from utils.db import get_vacancies_for_age
        age = int(data.get("age", 0))
        vacancies = get_vacancies_for_age(age)

        if not vacancies:
            await callback.message.edit_text("üòî –ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π –¥–ª—è –≤–∞—à–æ—ó –≤—ñ–∫–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.",
                                             reply_markup=None)
            await state.clear()
            await callback.answer()
            return

        await state.update_data(vacancies=vacancies)
        unique_positions = sorted(list(set(v['position'] for v in vacancies if 'position' in v)))

        from keyboards import positions_inline_keyboard
        await callback.message.edit_text(
            "–ß—É–¥–æ–≤–æ! –û–±–µ—Ä–∏ –ø–æ—Å–∞–¥—É, —è–∫–∞ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:",
            reply_markup=positions_inline_keyboard(unique_positions)
        )
        await state.set_state(Form.choosing_position)
        await callback.answer()


@user_router.callback_query(F.data == "view_feedback")
async def view_user_feedback(callback: CallbackQuery, state: FSMContext):
    from utils.db import get_user_feedbacks
    feedbacks = get_user_feedbacks(callback.from_user.id)

    if not feedbacks:
        await callback.message.answer("üòî –í–∏ —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –≤—ñ–¥–≥—É–∫—É.")
        await callback.answer()
        return

    for row in feedbacks:
        record_id, job_description, created_at = row
        await callback.message.answer(
            f"üìå {job_description}\nüïí {created_at}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data=f"cancel_feedback_{record_id}")
            ]])
        )
    await callback.message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥:",
                                  reply_markup=back_to_interest_keyboard(show_edit=True, show_feedback=True))


@user_router.callback_query(F.data.startswith("cancel_feedback_"))
async def cancel_feedback(callback: CallbackQuery, state: FSMContext):
    record_id = int(callback.data.split("_")[-1])
    from utils.db import delete_feedback
    delete_feedback(record_id, callback.from_user.id)
    await callback.message.edit_text("‚úÖ –í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback.answer()

    @user_router.callback_query(F.data == "back_to_interest")
    async def process_back_to_interest(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        show_edit = all(data.get(k) for k in ["name", "phone", "age"])

        await callback.message.answer(
            "üîé –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:",
            reply_markup=interest_inline_keyboard(show_edit_button=show_edit, show_feedback_button=True)
        )
        await state.set_state(Form.choosing_interest)
        await callback.answer()


@user_router.callback_query(F.data == "admin_panel")
async def admin_panel(callback: CallbackQuery, state: FSMContext):
    from utils.db import is_admin
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ HR-–ø–∞–Ω–µ–ª—ñ", show_alert=True)
        return

    await callback.message.answer("üõ† HR-–ø–∞–Ω–µ–ª—å ‚Äî –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=admin_panel_keyboard())
    await callback.answer()


@user_router.callback_query(F.data == "admin_edit_about")
async def admin_edit_about(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç ¬´–ü—Ä–æ –Ω–∞—Å¬ª.")
    await state.set_state(Form.waiting_for_about_text)
    await callback.answer()


@user_router.message(Form.waiting_for_about_text)
async def save_about_text(message: Message, state: FSMContext):
    text = message.text.strip()
    from utils.db import set_setting
    set_setting("about_text", text)

    await message.answer("‚úÖ –û–ø–∏—Å ¬´–ü—Ä–æ –Ω–∞—Å¬ª –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.set_state(Form.choosing_interest)


@user_router.callback_query(F.data == "admin_view_feedbacks")
async def admin_view_feedbacks(callback: CallbackQuery, state: FSMContext):
    from utils.db import get_all_feedbacks
    feedbacks = get_all_feedbacks()

    if not feedbacks:
        await callback.message.answer("üòî –í—ñ–¥–≥—É–∫—ñ–≤ —â–µ –Ω–µ–º–∞—î.")
        await callback.answer()
        return

    for fb in feedbacks:
        fid, name, phone, age, chat_id, job, created, checked = fb
        status = "‚úÖ –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ" if checked else "üïì –ù–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ"

        msg = (
            f"üë§ {name}, {age} —Ä–æ–∫—ñ–≤\n"
            f"üì± {phone}\n"
            f"üìå {job}\n"
            f"üïí {created}\n"
            f"üÜî Chat ID: {chat_id}\n"
            f"üìç –°—Ç–∞—Ç—É—Å: {status}"
        )

        buttons = []
        if not checked:
            buttons.append(InlineKeyboardButton(text="‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ", callback_data=f"mark_checked_{fid}"))
        buttons.append(InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"admin_delete_feedback_{fid}"))

        await callback.message.answer(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[buttons]))

    await callback.answer()


@user_router.callback_query(F.data.startswith("mark_checked_"))
async def mark_checked(callback: CallbackQuery, state: FSMContext):
    record_id = int(callback.data.split("_")[-1])
    from utils.db import mark_feedback_checked
    mark_feedback_checked(record_id)
    await callback.message.edit_text("‚úÖ –í—ñ–¥–≥—É–∫ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏–π.")
    await callback.answer()


@user_router.callback_query(F.data == "admin_edit_vacancies")
async def admin_edit_vacancies(callback: CallbackQuery, state: FSMContext):
    from utils.db import get_all_cities
    cities = get_all_cities()

    buttons = [[InlineKeyboardButton(text=city, callback_data=f"admin_city_{city}")] for city in cities]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])

    await callback.message.answer("üèô –û–±–µ—Ä–∏ –º—ñ—Å—Ç–æ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(Form.choosing_city)
    await callback.answer()


@user_router.callback_query(F.data.startswith("admin_city_"), Form.choosing_city)
async def admin_choose_market(callback: CallbackQuery, state: FSMContext):
    city = callback.data.replace("admin_city_", "")
    from utils.db import get_markets_by_city
    markets = get_markets_by_city(city)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ –∫–ª—é—á—ñ
    market_keys = {}
    for idx, market in enumerate(markets):
        key = f"m_{idx}"
        market_keys[key] = market

    await state.update_data(selected_city=city, market_keys=market_keys)

    # –ö–Ω–æ–ø–∫–∏ –∑ –±–µ–∑–ø–µ—á–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏
    buttons = [
        [InlineKeyboardButton(text=market, callback_data=f"admin_market_{key}")]
        for key, market in market_keys.items()
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_edit_vacancies")])

    await callback.message.answer(f"üè¢ –û–±–µ—Ä–∏ –∑–∞–∫–ª–∞–¥ —É –º—ñ—Å—Ç—ñ ¬´{city}¬ª:",
                                  reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(Form.choosing_market)
    await callback.answer()


@user_router.callback_query(F.data.startswith("admin_market_"), Form.choosing_market)
async def admin_choose_vacancy(callback: CallbackQuery, state: FSMContext):
    key = callback.data.replace("admin_market_", "")
    data = await state.get_data()
    market_keys = data.get("market_keys", {})
    market = market_keys.get(key)

    if not market:
        await callback.answer("‚õîÔ∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–ª–∞–¥.")
        return

    city = data.get("selected_city")
    from utils.db import get_vacancies_by_market
    vacancies = get_vacancies_by_market(city, market)

    if not vacancies:
        await callback.message.answer("üòï –£ —Ü—å–æ–º—É –∑–∞–∫–ª–∞–¥—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤–∞–∫–∞–Ω—Å—ñ–π.")
        await callback.answer()
        return

    for v in vacancies:
        vid, position, location, age_range, description = v
        text = f"üìå {position}\nüìç {location}\nüë• {age_range}\nüìù {description or '‚Äî'}"

        await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_vacancy_{vid}")],
            [InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_vacancy_{vid}")]
        ]))

    await callback.message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥:",
                                  reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                      [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_edit_vacancies")]
                                  ]))
    await callback.answer()


@user_router.callback_query(F.data.startswith("delete_vacancy_"))
async def admin_delete_vacancy(callback: CallbackQuery, state: FSMContext):
    vacancy_id = int(callback.data.split("_")[-1])
    from utils.db import delete_vacancy
    delete_vacancy(vacancy_id)
    await callback.message.edit_text("üóë –í–∞–∫–∞–Ω—Å—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await callback.answer()


@user_router.callback_query(F.data.startswith("edit_vacancy_"))
async def admin_start_edit_vacancy(callback: CallbackQuery, state: FSMContext):
    vacancy_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_vacancy_id=vacancy_id)

    await callback.message.answer(
        "‚úèÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n"
        "–ü–æ–∑–∏—Ü—ñ—è | –ó–∞–∫–ª–∞–¥ | –ú—ñ—Å—Ç–æ | –ê–¥—Ä–µ—Å–∞ | –í—ñ–∫ | –û–ø–∏—Å"
    )
    await state.set_state(Form.editing_vacancy)
    await callback.answer()


@user_router.message(Form.editing_vacancy)
async def save_edited_vacancy(message: Message, state: FSMContext):
    parts = [p.strip() for p in message.text.split("|")]
    if len(parts) < 6:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –ú–∞—î –±—É—Ç–∏:\n–ü–æ–∑–∏—Ü—ñ—è | –ó–∞–∫–ª–∞–¥ | –ú—ñ—Å—Ç–æ | –ê–¥—Ä–µ—Å–∞ | –í—ñ–∫ | –û–ø–∏—Å")
        return

    position, market, city, location, age_range, description = parts[:6]
    data = await state.get_data()
    vacancy_id = data.get("editing_vacancy_id")

    from utils.db import update_vacancy
    update_vacancy(vacancy_id, position, market, city, location, age_range, description)

    await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.set_state(Form.choosing_interest)
