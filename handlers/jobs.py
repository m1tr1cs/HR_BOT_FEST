from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from states import Form
#from keyboards import back_keyboard
#from keyboards import interest_keyboard
from utils.sheets import save_candidate
from keyboards import positions_keyboard
from keyboards import positions_inline_keyboard, interest_inline_keyboard

jobs_router = Router()

# @jobs_router.message(Form.choosing_position, F.text == "üîô –ù–∞–∑–∞–¥")
# async def process_back_to_categories(message: Message, state: FSMContext):
#     data = await state.get_data()
#     vacancies = data.get("vacancies", [])
#     unique_positions = sorted(list(set(v['position'] for v in vacancies if 'position' in v)))
#     from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
#     position_buttons = [KeyboardButton(text=pos) for pos in unique_positions]
#     kb = ReplyKeyboardMarkup(
#         keyboard=[[btn] for btn in position_buttons] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
#         resize_keyboard=True
#     )
#     await message.answer("–ß—É–¥–æ–≤–æ! –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —è–∫–∞ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:", reply_markup=kb)
#     #await state.set_state(Form.choosing_interest)
#     await state.set_state(Form.choosing_position)

# @jobs_router.message(Form.choosing_position)
# async def process_position_choice(message: Message, state: FSMContext):
#     if message.text == "üîô –ù–∞–∑–∞–¥":
#         await message.answer("üîé –©–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:", reply_markup=interest_keyboard())
#         await state.set_state(Form.choosing_interest)
#         return
#
#     chosen_position = message.text
#     data = await state.get_data()
#     vacancies = data.get("vacancies", [])
#     unique_positions = sorted(list(set(v['position'] for v in vacancies if 'position' in v)))
#     #new keyboard from position
#     kb = positions_keyboard(unique_positions)
#     if chosen_position not in unique_positions:
#         await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫.")
#         return
#
#     filtered_vacancies = [v for v in vacancies if v.get('position') == chosen_position]
#
#     await message.answer(
#         f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(filtered_vacancies)} –≤–∞–∫–∞–Ω—Å—ñ–π –∑–∞ –ø–æ—Å–∞–¥–æ—é ¬´{chosen_position}¬ª. –ù–∞—Ç–∏—Å–Ω–∏ ¬´–¶—ñ–∫–∞–≤–∏—Ç—å¬ª –ø—ñ–¥ —Ç—ñ—î—é, —â–æ —Å–ø–æ–¥–æ–±–∞–ª–∞—Å—å.",
#         reply_markup=ReplyKeyboardRemove())
#
#     for vacancy in filtered_vacancies:
#         vacancy_text = (
#             f"üè¢ –ü–æ—Å–∞–¥–∞: {vacancy.get('position', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
#             f"üè¢ –ó–∞–∫–ª–∞–¥: {vacancy.get('market', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
#             f"üìç –ú—ñ—Å—Ç–æ: {vacancy.get('city', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
#             f"üó∫Ô∏è –ê–¥—Ä–µ—Å–∞: {vacancy.get('location', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
#             f"üë• –í—ñ–∫: {vacancy.get('age_range', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
#             f"üìù –û–ø–∏—Å: {vacancy.get('description', '–ë–µ–∑ –æ–ø–∏—Å—É')}"
#         )
#         inline_kb = InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–¶—ñ–∫–∞–≤–∏—Ç—å ‚ú®", callback_data=f"apply_{vacancy['vacancy_id']}")]
#         ])
#         await message.answer(vacancy_text, reply_markup=inline_kb)
#     await message.answer(
#         "–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ 'üîô –ù–∞–∑–∞–¥'.",
#         reply_markup=back_keyboard()
#     )


@jobs_router.callback_query(F.data.startswith("position_"), Form.choosing_position)
async def process_position_callback(callback: CallbackQuery, state: FSMContext):
    chosen_position = callback.data.replace("position_", "")
    data = await state.get_data()
    vacancies = data.get("vacancies", [])
    unique_positions = sorted(list(set(v['position'] for v in vacancies if 'position' in v)))
    if chosen_position not in unique_positions:
        await callback.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫.")
        return

    filtered_vacancies = [v for v in vacancies if v.get('position') == chosen_position]
    #await callback.message.answer(
    #    f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(filtered_vacancies)} –≤–∞–∫–∞–Ω—Å—ñ–π –∑–∞ –ø–æ—Å–∞–¥–æ—é ¬´{chosen_position}¬ª. –ù–∞—Ç–∏—Å–Ω–∏ ¬´–¶—ñ–∫–∞–≤–∏—Ç—å¬ª –ø—ñ–¥ —Ç—ñ—î—é, —â–æ —Å–ø–æ–¥–æ–±–∞–ª–∞—Å—å."
    #)
    for vacancy in filtered_vacancies:
        vacancy_text = (
            f"üè¢ –ü–æ—Å–∞–¥–∞: {vacancy.get('position', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üè¢ –ó–∞–∫–ª–∞–¥: {vacancy.get('market', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìç –ú—ñ—Å—Ç–æ: {vacancy.get('city', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üó∫Ô∏è –ê–¥—Ä–µ—Å–∞: {vacancy.get('location', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üë• –í—ñ–∫: {vacancy.get('age_range', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìù –û–ø–∏—Å: {vacancy.get('description', '–ë–µ–∑ –æ–ø–∏—Å—É')}"
        )
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–¶—ñ–∫–∞–≤–∏—Ç—å ‚ú®", callback_data=f"apply_{vacancy['vacancy_id']}")]
        ])
        await callback.message.answer(vacancy_text, reply_markup=inline_kb)
    #inline button "Back" ----- testing
    await callback.message.answer(
        "–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ '–ù–∞–∑–∞–¥'.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_positions")]]
        )
    )


#handler inline button back
@jobs_router.callback_query(F.data == "back_to_positions")
async def process_back_to_positions(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    vacancies = data.get("vacancies", [])
    unique_positions = sorted(list(set(v['position'] for v in vacancies if 'position' in v)))
    await callback.message.edit_text(
        "–ß—É–¥–æ–≤–æ! –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —è–∫–∞ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:",
        reply_markup=positions_inline_keyboard(unique_positions)
    )
    #await callback.message.answer("\u200B", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.choosing_position)
    await callback.answer()


@jobs_router.callback_query(F.data == "back_to_interest")
async def process_back_to_interest(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    #await callback.message.answer(
    #    "üîé –ß—É–¥–æ–≤–æ! –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:",
    #    reply_markup=interest_keyboard()
    #)
    await callback.message.answer(
        "üîé –ß—É–¥–æ–≤–æ! –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:",
        reply_markup=interest_inline_keyboard()
    )
    #await state.clear()
    await state.set_state(Form.choosing_interest)
    await callback.answer()



@jobs_router.callback_query(F.data.startswith("apply_"))
async def process_vacancy_callback(callback: CallbackQuery, state: FSMContext):
    vacancy_id = int(callback.data.split("_")[1])
    user_data = await state.get_data()
    all_vacancies = user_data.get("vacancies", [])
    selected_vacancy = next((v for v in all_vacancies if v.get('vacancy_id') == vacancy_id), None)
    if not selected_vacancy or not all(k in user_data for k in ['name', 'phone', 'age']):
        await callback.answer("–ü–æ–º–∏–ª–∫–∞! –°–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ–ø–æ–≤–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ /start", show_alert=True)
        return
    name = user_data.get('name')
    phone = user_data.get('phone')
    age = user_data.get('age')
    chat_id = callback.from_user.id
    save_candidate(name, phone, age, chat_id, selected_vacancy)
    await callback.answer("‚úÖ –¢–≤—ñ–π –≤—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!", show_alert=False)
    await callback.message.answer(f"üéâ **–î—è–∫—É—î–º–æ! –í–∞—à –≤—ñ–¥–≥—É–∫ –Ω–∞ —Ü—é –≤–∞–∫–∞–Ω—Å—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.**\n\n{callback.message.text}",
                                     parse_mode="Markdown", reply_markup=None)
    await state.update_data(vacancies=None)
    #await callback.message.answer("–Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—à—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –∞–±–æ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start.",
    #                              reply_markup=ReplyKeyboardRemove())
    main_menu_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_interest")]
        ]
    )
    await callback.message.answer("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=main_menu_kb)

