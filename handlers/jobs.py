from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from states import Form
from utils.db import save_candidate, has_applied, get_admin_chat_ids
from keyboards import positions_inline_keyboard, interest_inline_keyboard

jobs_router = Router()


@jobs_router.callback_query(F.data.startswith("position_"), Form.choosing_position)
async def process_position_callback(callback: CallbackQuery, state: FSMContext):
    chosen_position = callback.data.replace("position_", "")
    data = await state.get_data()
    vacancies = data.get("vacancies", [])
    unique_positions = sorted(list(set(v['position'] for v in vacancies if 'position' in v)))
    if chosen_position not in unique_positions:
        await callback.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫.")
        return

    filtered_vacancies = [v for v in vacancies if v.get('position') == chosen_position]
    vacancy_message_ids = []
    for vacancy in filtered_vacancies:
        vacancy_text = (
            f"üè¢ –ü–æ—Å–∞–¥–∞: {vacancy.get('position', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üè¢ –ó–∞–∫–ª–∞–¥: {vacancy.get('market', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìç –ú—ñ—Å—Ç–æ: {vacancy.get('city', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üó∫Ô∏è –ê–¥—Ä–µ—Å–∞: {vacancy.get('location', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìù –û–ø–∏—Å: {vacancy.get('description', '–ë–µ–∑ –æ–ø–∏—Å—É')}"
        )
        buttons = []
        if not has_applied(callback.from_user.id, vacancy["vacancy_id"]):
            buttons.append([InlineKeyboardButton(text="–¶—ñ–∫–∞–≤–∏—Ç—å ‚ú®", callback_data=f"apply_{vacancy['vacancy_id']}")])
        msg = await callback.message.answer(vacancy_text,
                                            reply_markup=InlineKeyboardMarkup(
                                                inline_keyboard=buttons) if buttons else None)
        vacancy_message_ids.append(msg.message_id)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —ñ —Ç–µ–∂ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ id
    back_msg = await callback.message.answer(
        "–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ '–ù–∞–∑–∞–¥'.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_positions")]]
        )
    )
    await state.update_data(vacancy_message_ids=vacancy_message_ids, vacancy_back_message_id=back_msg.message_id)


# handler inline button back
@jobs_router.callback_query(F.data == "back_to_positions")
async def process_back_to_positions(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    vacancies = data.get("vacancies", [])
    unique_positions = sorted(list(set(v['position'] for v in vacancies if 'position' in v)))
    await callback.message.edit_text(
        "–ß—É–¥–æ–≤–æ! –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —è–∫–∞ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:",
        reply_markup=positions_inline_keyboard(unique_positions)
    )

    await state.set_state(Form.choosing_position)
    await callback.answer()


@jobs_router.callback_query(F.data == "back_to_interest")
async def process_back_to_interest(callback: CallbackQuery, state: FSMContext):
    from utils.db import is_admin
    data = await state.get_data()
    show_edit = all(data.get(k) for k in ["name", "phone", "age"])
    is_admin_user = is_admin(callback.from_user.id)

    from keyboards import interest_inline_keyboard
    await callback.message.answer(
        "üîé –ß—É–¥–æ–≤–æ! –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:",
        reply_markup=interest_inline_keyboard(
            show_edit_button=show_edit,
            show_feedback_button=True,
            show_admin_button=is_admin_user
        )
    )
    await state.set_state(Form.choosing_interest)
    await callback.answer()


@jobs_router.callback_query(F.data.startswith("apply_"))
async def process_vacancy_callback(callback: CallbackQuery, state: FSMContext):
    vacancy_id = int(callback.data.split("_")[1])
    user_data = await state.get_data()
    all_vacancies = user_data.get("vacancies")
    if not all_vacancies:
        await callback.answer("‚ùó –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π. –ü–æ—á–Ω—ñ—Ç—å –∑ /start", show_alert=True)
        return

    # –í–ò–î–ê–õ–Ø–Ñ–ú–û –≤—Å—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó —Ç–∞ "–ù–∞–∑–∞–¥"
    vacancy_message_ids = user_data.get("vacancy_message_ids", [])
    for msg_id in vacancy_message_ids:
        try:
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
        except Exception:
            pass
    back_message_id = user_data.get("vacancy_back_message_id")
    if back_message_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, back_message_id)
        except Exception:
            pass

    selected_vacancy = next((v for v in all_vacancies if v.get('vacancy_id') == vacancy_id), None)
    if not selected_vacancy or not all(k in user_data for k in ['name', 'phone', 'age']):
        await callback.answer("–ü–æ–º–∏–ª–∫–∞! –°–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ–ø–æ–≤–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ /start", show_alert=True)
        return
    name = user_data.get('name')
    phone = user_data.get('phone')
    age = user_data.get('age')
    chat_id = callback.from_user.id
    resume_link = user_data.get('resume_link')
    save_candidate(name, phone, age, chat_id, selected_vacancy, resume_link)
    # ----- –ù–û–í–ï! -----
    from utils.db import get_admin_chat_ids
    admins = get_admin_chat_ids()
    vacancy_text = (
        f"üÜï –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫!\n"
        f"üë§ –Ü–º º—è: {name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üéÇ –í—ñ–∫: {age}\n"
        f"üìå –í–∞–∫–∞–Ω—Å—ñ—è: {selected_vacancy.get('position', '')} - {selected_vacancy.get('market', '')} ({selected_vacancy.get('location', '')})"
    )

    buttons = []
    if resume_link:
        if resume_link.startswith("BQAC"):
            # callback –Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª–∞ —Å–∞–º–µ –¥–ª—è —Ü—å–æ–≥–æ –≤—ñ–¥–≥—É–∫—É (id —Ç—Ä–µ–±–∞ –¥—ñ—Å—Ç–∞—Ç–∏!)
            # –¢—Ä–µ–±–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ id –∑–∞–ø–∏—Å—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø—ñ—Å–ª—è save_candidate. –ù–∞–π–ø—Ä–æ—Å—Ç—ñ—à–µ ‚Äî –¥—ñ—Å—Ç–∞—Ç–∏ max(id):
            from utils.db import get_last_candidate_id_by_user
            candidate_id = get_last_candidate_id_by_user(chat_id)
            buttons.append([
                InlineKeyboardButton(
                    text="üìÑ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ñ–∞–π–ª",
                    callback_data=f"admin_open_resume_{candidate_id}"
                )
            ])
        else:
            buttons.append([
                InlineKeyboardButton(
                    text="üîó –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª—ñ–Ω–∫",
                    url=resume_link
                )
            ])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None

    for admin_chat in admins:
        try:
            await callback.bot.send_message(admin_chat, vacancy_text, reply_markup=markup)
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
    # ----- –ö—ñ–Ω–µ—Ü—å –Ω–æ–≤–æ–≥–æ -----

    await callback.answer("‚úÖ –¢–≤—ñ–π –≤—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!", show_alert=False)
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ª–∏—à–µ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –≤–∞–∫–∞–Ω—Å—ñ—ó!
    await callback.message.answer(
        f"üéâ **–î—è–∫—É—î–º–æ! –í–∞—à –≤—ñ–¥–≥—É–∫ –Ω–∞ —Ü—é –≤–∞–∫–∞–Ω—Å—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.**\n\n"
        f"üè¢ –ü–æ—Å–∞–¥–∞: {selected_vacancy.get('position', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üè¢ –ó–∞–∫–ª–∞–¥: {selected_vacancy.get('market', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìç –ú—ñ—Å—Ç–æ: {selected_vacancy.get('city', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üó∫Ô∏è –ê–¥—Ä–µ—Å–∞: {selected_vacancy.get('location', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìù –û–ø–∏—Å: {selected_vacancy.get('description', '–ë–µ–∑ –æ–ø–∏—Å—É')}",
        parse_mode="Markdown",
        reply_markup=None
    )
    await state.update_data(vacancies=None)
    from keyboards import main_menu_keyboard
    await callback.message.answer("üîß –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu_keyboard())
